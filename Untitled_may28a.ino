#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/136ea4a5-2b1a-4395-a37a-9f6aa1bb775b 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float dist;
  CloudLight buzz;
  CloudLight night_led;
  CloudLight red_led;
  int etat;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include "thingProperties.h"
#include "ThingSpeak.h" 
unsigned long myChanne2Number = 1700128;
const char * myWriteAPIKey = "8QJO1ZNM6FVHCPGO";  
WiFiClient client; 

//////////////////////////////

#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701

int ETATP = 15; // pin 2 for front-left sensor

const int trigPin = 12;
const int echoPin = 13;
long duration;
float distanceCm;

int nled = 14;

int rled = 27;

int buz = 26;



void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  ThingSpeak.begin(client);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */

  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  pinMode(nled, OUTPUT);
  pinMode(rled, OUTPUT);
  pinMode(buz, OUTPUT);
  pinMode(ETATP, INPUT);
  

  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  onDistChange();
  onEtatChange();
  delay(5000);
}

/*
  Since Dist is READ_WRITE variable, onDistChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDistChange()  {
  // Add your code here to act upon Dist change
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);

  // Calculate the distance
  distanceCm = duration * SOUND_SPEED / 2;

  // Prints the distance in the Serial Monitor
  Serial.print("Distance (cm): ");
  Serial.println(distanceCm);
  dist = distanceCm;

  if (distanceCm < 30)
  {
    buzz = 1;
    red_led=1;
    onBuzzChange();
    onRedLedChange();
    delay(1000);
    buzz = 0;
    red_led=0;
    onBuzzChange();
    onRedLedChange();
  }

  ThingSpeak.writeField(myChanne2Number, 1, distanceCm , myWriteAPIKey); 
  
  delay(1000);

}

/*
  Since RedLed is READ_WRITE variable, onRedLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRedLedChange()  {
  // Add your code here to act upon RedLed change
  if (red_led == 1)
  {
    digitalWrite(rled, HIGH);
  }
  else
  {
    digitalWrite(rled, LOW);
  }
}

/*
  Since NightLed is READ_WRITE variable, onNightLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onNightLedChange()  {
  // Add your code here to act upon NightLed change
  if (night_led == 1)
  {
    digitalWrite(nled, HIGH);
  }
  else
  {
    digitalWrite(nled, LOW);
  }

}

/*
  Since Buzz is READ_WRITE variable, onBuzzChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBuzzChange()  {
  // Add your code here to act upon Buzz change
  if (buzz == 1)
  {
    digitalWrite(buz, HIGH);
  }
  else
  {
    digitalWrite(buz, LOW);
  }
}


/*
  Since Etat is READ_WRITE variable, onEtatChange() is
  executed every time a new value is received from IoT Cloud.
*/


void onEtatChange()  {
  // Add your code here to act upon Etat change
  // ETATP Sensor code for Robojax.com
  delay(1000);
  int TILT_SENSED = digitalRead(ETATP);// read TILT sensor

  etat = TILT_SENSED ;

  // if ETATP is sensed

  if ( TILT_SENSED == 1)
  {
    red_led = 1;
    onRedLedChange();
    buzz = 1;
    onBuzzChange();
    Serial.println("il y a un défaut d'etat !!!");
    delay(2000);
    buzz = 0;
    onBuzzChange();
    red_led = 0;
    onRedLedChange();
  }
  else
  {
    Serial.println("Normal");
  }
  ThingSpeak.writeField(myChanne2Number, 2, TILT_SENSED , myWriteAPIKey); 
  
}
